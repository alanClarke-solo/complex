package com.workflow.ulid;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class ULIDFactoryTest {

    @Test
    void shouldGenerateValidULIDs() {
        // Arrange
        ULIDFactory factory = new ULIDFactory(42);

        // Act
        String ulid = factory.generate();

        // Assert
        assertEquals(26, ulid.length(), "ULID should be 26 characters long");
        assertTrue(ulid.matches("[0-9A-HJKMNP-TV-Z]{26}"), "ULID should contain only valid characters");
    }

    @Test
    void shouldGenerateUniqueULIDs() {
        // Arrange
        ULIDFactory factory = new ULIDFactory(42);
        int count = 1000;
        Set<String> ulids = new HashSet<>();

        // Act
        for (int i = 0; i < count; i++) {
            ulids.add(factory.generate());
        }

        // Assert
        assertEquals(count, ulids.size(), "All generated ULIDs should be unique");
    }

    @Test
    void shouldGenerateMonotonicULIDs() {
        // Arrange
        ULIDFactory factory = new ULIDFactory(42);
        String first = factory.generate();

        // Act
        String second = factory.generateMonotonic();

        // Assert
        assertTrue(second.compareTo(first) > 0, "Monotonic ULID should be lexicographically greater");
    }

    @Test
    void shouldGenerateULIDsWithConsistentNodeId() {
        // Arrange
        int nodeId = 42;
        ULIDFactory factory = new ULIDFactory(nodeId);

        // Act & Assert
        for (int i = 0; i < 100; i++) {
            String ulid = factory.generate();
            assertEquals(nodeId, ULIDFactory.extractNodeId(ulid),
                    "Node ID embedded in ULID should match factory's node ID");
        }
    }

    @ParameterizedTest
    @ValueSource(ints = {0, 1, 42, 127, 255, 511, 1023})
    void shouldEmbedAndExtractNodeId(int nodeId) {
        // Arrange
        ULIDFactory factory = new ULIDFactory(nodeId);

        // Act
        String ulid = factory.generate();
        int extractedNodeId = ULIDFactory.extractNodeId(ulid);

        // Assert
        assertEquals(nodeId, extractedNodeId,
                "Extracted node ID should match the original node ID");
    }

    @Test
    void shouldRejectInvalidNodeIds() {
        // Assert
        assertThrows(IllegalArgumentException.class, () -> new ULIDFactory(-1),
                "Should reject negative node ID");
        assertThrows(IllegalArgumentException.class, () -> new ULIDFactory(1024),
                "Should reject node ID greater than 1023");
    }

    @Test
    void shouldRejectInvalidULIDs() {
        // Assert
        assertThrows(IllegalArgumentException.class,
                () -> ULIDFactory.extractNodeId(null),
                "Should reject null ULID");

        assertThrows(IllegalArgumentException.class,
                () -> ULIDFactory.extractNodeId("ABCDEF"),
                "Should reject ULID with invalid length");

        assertThrows(IllegalArgumentException.class,
                () -> ULIDFactory.extractNodeId("01G6XCPN30000000000000000"),
                "Should reject ULID with invalid length");

        // Test invalid character ('L' is not allowed in Crockford Base32)
        assertThrows(IllegalArgumentException.class,
                () -> ULIDFactory.extractNodeId("01G6XCPN30L00000000000000"),
                "Should reject ULID with invalid characters");
    }

    @Test
    void shouldHandleMultipleThreads() throws InterruptedException {
        // Arrange
        final int nodeId = 42;
        final ULIDFactory factory = new ULIDFactory(nodeId);
        final Set<String> ulids = new HashSet<>();
        final int threadsCount = 10;
        final int ulidsPerThread = 100;

        // Act
        Thread[] threads = new Thread[threadsCount];
        for (int i = 0; i < threadsCount; i++) {
            threads[i] = new Thread(() -> {
                for (int j = 0; j < ulidsPerThread; j++) {
                    String ulid = factory.generate();
                    synchronized (ulids) {
                        ulids.add(ulid);
                    }

                    assertEquals(nodeId, ULIDFactory.extractNodeId(ulid),
                            "Node ID should be correctly embedded and extracted in multi-threaded context");
                }
            });
            threads[i].start();
        }

        for (Thread thread : threads) {
            thread.join();
        }

        // Assert
        assertEquals(threadsCount * ulidsPerThread, ulids.size(),
                "All ULIDs generated by multiple threads should be unique");
    }
}